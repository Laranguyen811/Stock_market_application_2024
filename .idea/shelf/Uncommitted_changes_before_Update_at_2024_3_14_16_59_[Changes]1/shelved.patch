Index: Stock_Data_Analysis.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Stock_Market_Application import *\r\nimport matplotlib.pyplot as plt\r\nimport pandas as pd\r\nimport seaborn as sns\r\nimport numpy as np\r\nimport pylab\r\nimport scipy.stats as stats\r\nfrom statsmodels.tsa.seasonal import seasonal_decompose\r\nfrom datetime import datetime\r\nimport plotly.graph_objects as go\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.decomposition import PCA\r\n#Create a dictionary to store all the stock dataframes and its name\r\n\r\nstock_data = {'MSFT':data_msft,'GOOG': data_goog,'AMZN': data_amzn,'AAPL': data_aapl,'SAP':data_sap,'META':data_meta,'005930_KS':data_005930_ks,'INTC':data_intc,\r\n              'IBM':data_ibm, 'ORCL':data_orcl, 'BABA':data_baba,'TCEHY':data_tcehy,'NVDA': data_nvda,'TSM':data_tsm,'NFLX': data_nflx,'TSLA':data_tsla,'CRM':data_crm,\r\n              'ADBE':data_adbe,'PYPL':data_pypl}\r\n'''a dictionary can store a dataframe'''\r\n\r\n# A function to analyse data structures of stock data\r\ndef analyse_stock_data(stock_data):\r\n    for i, (name,data) in enumerate(stock_data.items()):\r\n        '''Takes a dictionary of stock data and returning an iterator aggregating\r\n        elements from each list. Also print the info, shape (numbers of columns and rows), data type and the table of statistical descriptions.\r\n        of each stock.  \r\n        Inputs:\r\n        stock_data (dictionary): A dictionary of stock data and their corresponding names\r\n        Returns:\r\n        string: stock name\r\n        string: information about the stock\r\n        string: numbers of columns and rows\r\n        string: data types of each column in the stock dataframe\r\n        string: stats of the stock dataframe \r\n        '''\r\n        print(f'{name}')\r\n        print(\"\\nInfo:\")\r\n        print(data.info())\r\n        print(\"\\nShape:\")\r\n        print(data.shape)\r\n        print(\"\\nData Types:\")\r\n        print(data.dtypes)\r\n        print(\"\\nDescribe:\")\r\n        print(data.describe())\r\n        print(data.duplicated().sum())\r\n        print(\"\\n Number of duplicated values: \" + str(data.duplicated().sum()))\r\nanalyse_stock_data(stock_data)\r\n\r\n#A dictionary to store all the stock data with reset DateTimeindex indices\r\nstock_reset_index = {}\r\n#A function to reset DateTimeIndex for each dataframe\r\ndef reset_index_stock_data(stock_data):\r\n    '''Takes a dictionary of stock data and resets the index of time.\r\n    Input:\r\n    stock_data(dictionary): a dictionary containing the stock data and its name\r\n    Returns:\r\n    stock_reset_index(dictionary): Dictionary with stock names as keys and stock data as values with reset Date indices\r\n    '''\r\n    for i,(name,data) in enumerate(stock_data.items()):\r\n        data_reset = data.reset_index()\r\n        stock_reset_index[name + '_reset'] = data_reset\r\n    print(stock_reset_index)\r\n\r\nreset_index_stock_data(stock_data)\r\n\r\n#Pair plots for stock market data\r\nfor i,(name,data) in enumerate(stock_reset_index.items()):\r\n    plt.figure()\r\n    sns.pairplot(data)\r\n    plt.title(name)\r\n    plt.show()\r\nplt.close('all')\r\n\r\n#Principal Component Analysis for stock market data to identify dominant patterns and understand relationships\r\ndef principal_analysis(df):\r\n    '''\r\n\r\n     Takes a dictionary of stock data and returns values of explained variance ratios for\r\n     principal components, scatter plots of principal components and dataframes of loadings\r\n     Input:\r\n     stock_data(dictionary): a dictionary containing the stock data and their names\r\n\r\n     Returns:\r\n     string: explained variance ratios for principal components of stock data\r\n     dataframe: loadings of principal components of stock data\r\n     graph: scatter plots of principal components of stock data\r\n            '''\r\n    for i,(name,data) in enumerate(stock_data.items()):\r\n        scaler = StandardScaler() #scaling our data with standard scaler\r\n        scaled_data = scaler.fit_transform(data)\r\n\r\n        n_components = 6 #specifying the number of dimensions we want to keep\r\n        pca = PCA(n_components=n_components)\r\n        principal_components = pca.fit_transform(scaled_data)\r\n        #Convert to DataFrame\r\n        component_names = [f\"PC{j+1}\" for j in range(principal_components.shape[1])]\r\n        principal_df = pd.DataFrame(principal_components, columns=component_names)\r\n        principal_df.head()\r\n\r\n        #Check how much variance each principal component explains\r\n        explained_variance = pca.explained_variance_ratio_\r\n        print(f\"Explained variance ratio for {name}: {explained_variance}\")\r\n\r\n        #Calculate the correlations/covariance between the original features and PCA-scaled units\r\n        loadings = pd.DataFrame(\r\n            pca.components_.T, #transpose the matrix of loadings\r\n            columns = component_names,# the columns a re the principal components\r\n            index = data.columns, #the rows are the original features\r\n        )\r\n        print(loadings)\r\n        # Visualise the reduced-dimensional data\r\n\r\n        plt.figure(figsize=(8, 6))\r\n        sns.scatterplot(data=principal_components)  # creating a scatter plot for the principal components of all the data points for a company\r\n        plt.title(f\"Principal Components for {name}\")\r\n        plt.show()\r\n        plt.close('all')\r\n\r\n        def plot_variance(pca):\r\n            '''Takes PCA components and their corresponding explained variance\r\n             and returns their plots of explained variance.\r\n            Input:\r\n            pca components: a string of pca components of all features in stock market data\r\n            explained_variance: a list of explained variance for each pca component\r\n            Returns:\r\n            plot: a list of plots of explained variance for each pca\r\n            '''\r\n            fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(6, 8))\r\n            n = pca.n_components\r\n            grid = np.arange(1, n + 1)\r\n\r\n            # Explained variance\r\n            explained_variance = pca.explained_variance_ratio_\r\n            axs[0].bar(grid, explained_variance)\r\n            axs[0].set(\r\n                xlabel=\"Component\", ylabel=\"% Explained Variance\",\r\n                ylim=(0.0, 1.0)\r\n\r\n            )\r\n            # Cumulative Variance\r\n            cv = np.cumsum(explained_variance)\r\n            axs[1].plot(np.r_[0, grid], np.r_[0, cv], \"o-\")\r\n            axs[1].set(\r\n                xlabel=\"Component\", title=\"% Cumulative Variance\",\r\n                ylim=(0.0, 1.0)\r\n            )\r\n            # Set up figure\r\n            plt.title(f\"Variance for {name}\")\r\n            fig.set(figwidth=8, dpi=100)\r\n            plt.close('all')\r\n            return axs\r\n\r\n        plot_variance(pca)\r\nprincipal_analysis(stock_reset_index)\r\n\r\n\r\n#Probability Plot to determine whether our data follow a specific distribution.\r\ncols = ['Open', 'High', 'Low', 'Adj Close', 'Close', 'Volume']\r\ndef detect_normal_distribution(stock_data):\r\n    for i, (name,data) in enumerate(stock_data.items()):\r\n        fig, axs = plt.subplots(nrows=3, ncols=2, figsize=(10, 8))\r\n        axs = axs.flatten() #flatten (meaning to transform into a one-dimensional array)\r\n        # the axes array to easily iterate over it\r\n        for ax, col in zip(axs,cols): #using zip function to iterate over the axes and column names\r\n            #simultaneously\r\n            stats.probplot(data[col], dist='norm', plot=ax) #Q-Q Plot\r\n            ax.set_title(f\"Probability Plot of {col} for {name}\")\r\n        plt.tight_layout()\r\n        plt.show()\r\n#Create a dictionary to store stock names and their dataframes\r\ndetect_normal_distribution(stock_data)\r\n\r\n\r\n\r\n#Line Plot for stock data\r\ntrace_names = ['Open', 'High', 'Low', 'Adj Close', 'Close']\r\nfor i,(name,reset_data) in enumerate(stock_reset_index.items()):\r\n    fig = go.Figure()\r\n    for trace_name in trace_names:\r\n        fig.add_trace(go.Scatter(x=reset_data['Date'], y=reset_data[trace_name],mode='lines',name='Open'))\r\n    #fig.add_trace(go.Scatter(x=reset_data['Date'], y=reset_data['Volume'], mode='lines', name='Volume'))\r\n    fig.update_layout(title=f\"Stock Price for {name}\")\r\n    fig.show()\r\n\r\n#Statistical Analysis to understand the data distribution\r\n#def detect_normal_distribution(stock_data):\r\n #   '''Takes a dictionary of stock_data and returning histograms, shapiro test results and kolmogorov-smirnov test results\r\n  #  Input:\r\n   # stock_data (dict): Dictionary of stock data and their names\r\n\r\n#    Returns:\r\n #   graph: Histogram of stock data and their names\r\n  #  string: Shapiro test results of stock data\r\n   # string: Kolmogorov-Smirnov test results of stock data\r\n   # '''\r\n\r\n    #for i, (name,data) in enumerate(stock_data.items()):\r\n     #   fig, axs = plt.subplots(nrows=3, ncols=2, figsize=(10, 8))\r\n      #  axs = axs.flatten()  # flatten (meaning to transform into a one-dimensional array)\r\n       # for (ax,col) in zip(axs,cols):\r\n        #  decomposition = seasonal_decompose(data[col],model= 'multiplicative', period=7)\r\n\r\n         # trend = decomposition.trend\r\n         # seasonal = decomposition.seasonal\r\n         # residual = decomposition.resid\r\n          #Plot the original data, trend, seasonality and residuals\r\n         # plt.subplot(411)\r\n         # plt.plot(data[col],label='Original')\r\n          #plt.legend(loc='best')\r\n         # plt.subplot(412)\r\n         # plt.plot(trend,label='Trend')\r\n         # plt.legend(loc='best')\r\n         # plt.subplot(413)\r\n         # plt.plot(seasonal,label='Seasonality')\r\n         # plt.legend(loc='best')\r\n         # plt.subplot(414)\r\n         # plt.plot(residual,label='Residuals')\r\n         # plt.legend(loc='best')\r\n         # plt.tight_layout()\r\n    #plt.close('all')\r\n          #shapiro_test = stats.shapiro(data[col]) #Shapiro-Wilk Test\r\n          #print(f\"{name}'s Shapiro Test for {col}: {shapiro_test[0]}, p-value:{shapiro_test[1]}\")\r\n          #if shapiro_test[1] < 0.05:\r\n          #  print(f\"Based on Shapiro test, {name}'s {col} may not be a normal distribution.\")\r\n          #else:\r\n          #  print (f\"Based on Shapiro test, there is not enough evidence to suggest that {name}'s {col} may not be a normal distribution.\")\r\n\r\n           # kolmo_test = stats.kstest(data[col], 'norm') #Kolmogorov-Smirnov test\r\n          #  print (f\"{name}'s KS test for {col}: {kolmo_test.statistic}, p-value:{kolmo_test.pvalue}\")\r\n          #  if kolmo_test.pvalue < 0.05:\r\n           #     print (f\"Based on KS test, {name}'s {col} may not be a normal distribution.\")\r\n           # else:\r\n            #    print(f\"Based on KS test, there is not enough statistic evidence to suggest that {name}'s {col} may not be a normal distribution.\")\r\n#detect_normal_distribution(stock_data)\r\n\r\n\r\n\r\n\r\n#Investigating outliers in our stock data using the method of Interquartile Range(IQR) since all stock data are not normally\r\n# distributed.\r\n# It is a common technique used for stock market because it gives us insights into the spread of stock prices\r\n# over a specific period. It is resistant to outliers, making it robust.\r\n#An outlier: an extremely high or low data point relative to the nearest data points and\r\n#the rest of the neighboring co-existing vals in a dataset.\r\n#The IQR is the range between the first quartile (25th percentile) and the third quartile (75th percentile) of the data.\r\n#Any point falling below Q1 - 1.5IQR or above Q3 + 1.5IQR is considered an outlier.\r\n\r\nfor i,(name,data) in enumerate(stock_data.items()):\r\n    '''Takes stock data and returns and box plots outliers of them.\r\n    Input:\r\n    stock_data: a dictionary of stock data\r\n    Returns:\r\n    plot: a box plot of the stock data\r\n    Series: a series of outliers for each stock\r\n    '''\r\n\r\n    Q1 = data['Close'].quantile(0.25)\r\n    Q3 = data['Close'].quantile(0.75)\r\n    IQR = Q3 - Q1\r\n    #Define bounds for outliers\r\n    lower_bound = Q1 - 1.5 * IQR\r\n    upper_bound = Q3 + 1.5 * IQR\r\n    #Detect outliers\r\n    data_outliers = data[(data['Close'] < lower_bound) | (data['Close'] > upper_bound)]\r\n    if data_outliers.empty:\r\n        print(f\"The outliers of {name} are none\")\r\n    else:\r\n        print(f\"The outliers of {name} are {data_outliers['Close']}\")\r\n        print(f\"Number of outliers: {data_outliers.shape[0]}\")\r\n    #Create boxplot\r\n    plt.boxplot(data['Close'])\r\n    plt.title (f\"Box Plot of {name}\")\r\n    plt.show()\r\n    plt.close('all')\r\n\r\n #Heat maps to show the correlation between different features\r\n for i,(name,data) in enumerate(stock_data.items()):\r\n     #Calculate the correlation matrix\r\n     feat_corr = data.corr()\r\n\r\n     #Create the heat map of the correlation matrix\r\n     plt.figure(figsize=(10,8))\r\n     sns.heatmap(corr, cmap='coolwarm',annot=True)\r\n     plt.title (f\" The correlation matrix for {name}\")\r\n     plt.show()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Stock_Data_Analysis.py b/Stock_Data_Analysis.py
--- a/Stock_Data_Analysis.py	
+++ b/Stock_Data_Analysis.py	
@@ -70,11 +70,9 @@
     plt.show()
 plt.close('all')
 
-#Principal Component Analysis for stock market data to identify dominant patterns and understand relationships
+#Principal Component Analysis with Outliers for stock market data to identify dominant patterns and understand relationships
 def principal_analysis(df):
-    '''
-
-     Takes a dictionary of stock data and returns values of explained variance ratios for
+    ''' Takes a dictionary of stock data and returns values of explained variance ratios for
      principal components, scatter plots of principal components and dataframes of loadings
      Input:
      stock_data(dictionary): a dictionary containing the stock data and their names
@@ -83,24 +81,26 @@
      string: explained variance ratios for principal components of stock data
      dataframe: loadings of principal components of stock data
      graph: scatter plots of principal components of stock data
-            '''
+
+    '''
     for i,(name,data) in enumerate(stock_data.items()):
-        scaler = StandardScaler() #scaling our data with standard scaler
+        scaler = StandardScaler() #scaling our data with standard scaler to ensure equal contribution of each feature for the ease of PCA
         scaled_data = scaler.fit_transform(data)
 
         n_components = 6 #specifying the number of dimensions we want to keep
         pca = PCA(n_components=n_components)
-        principal_components = pca.fit_transform(scaled_data)
+        principal_components = pca.fit_transform(scaled_data) #fitting and transforming the data at the same time
         #Convert to DataFrame
         component_names = [f"PC{j+1}" for j in range(principal_components.shape[1])]
         principal_df = pd.DataFrame(principal_components, columns=component_names)
         principal_df.head()
 
         #Check how much variance each principal component explains
-        explained_variance = pca.explained_variance_ratio_
-        print(f"Explained variance ratio for {name}: {explained_variance}")
+        explained_variance = pca.explained_variance_ratio_ #explaining the proportion of total variability accounted for by a specific component/factor
+        explained_variance_dict = dict(zip(component_names, explained_variance))
+        print(f"Explained variance ratio for {name}: {explained_variance_dict}")
 
-        #Calculate the correlations/covariance between the original features and PCA-scaled units
+        #Calculate the correlations/covariance between the original features and PCA-scaled units (weights/coefficients of each component)
         loadings = pd.DataFrame(
             pca.components_.T, #transpose the matrix of loadings
             columns = component_names,# the columns a re the principal components
@@ -114,7 +114,6 @@
         plt.title(f"Principal Components for {name}")
         plt.show()
         plt.close('all')
-
         def plot_variance(pca):
             '''Takes PCA components and their corresponding explained variance
              and returns their plots of explained variance.
@@ -129,12 +128,10 @@
             grid = np.arange(1, n + 1)
 
             # Explained variance
-            explained_variance = pca.explained_variance_ratio_
             axs[0].bar(grid, explained_variance)
             axs[0].set(
-                xlabel="Component", ylabel="% Explained Variance",
+                xlabel="Component", title="% Explained Variance",
                 ylim=(0.0, 1.0)
-
             )
             # Cumulative Variance
             cv = np.cumsum(explained_variance)
@@ -144,17 +141,19 @@
                 ylim=(0.0, 1.0)
             )
             # Set up figure
-            plt.title(f"Variance for {name}")
+            plt.title(f"{name}",loc='center')
             fig.set(figwidth=8, dpi=100)
+            plt.show()
             plt.close('all')
-            return axs
-
         plot_variance(pca)
+
 principal_analysis(stock_reset_index)
 
 
+
 #Probability Plot to determine whether our data follow a specific distribution.
-cols = ['Open', 'High', 'Low', 'Adj Close', 'Close', 'Volume']
+
+
 def detect_normal_distribution(stock_data):
     for i, (name,data) in enumerate(stock_data.items()):
         fig, axs = plt.subplots(nrows=3, ncols=2, figsize=(10, 8))
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4f5895f3-2d93-4355-bcbb-97c6701d0028\" name=\"Changes\" comment=\"Add stock market analysis &#10;&#10;Scrape stock data using yfinance API.&#10;Add outlier detection and metadata.\">\r\n      <change afterPath=\"$PROJECT_DIR$/Building a Dash app.md\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Data Structures of Stock Data.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Stock Analysis.md\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/stock_market_app_review.md\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/ASX.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/ASX.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Stock_Data_Analysis.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Stock_Data_Analysis.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ZqF91uoUhatta9TbVHHxhZj3cs\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.Stock_Data_Visualisation.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.Stock_Market_Application.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;ToolWindowPlots.ShowToolbar&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/laran/PycharmProjects/ASX&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Stock_Market_Application\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ASX\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Stock_Market_Application.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.Stock_Market_Application\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-7a29c1521ef0-c986f194a52a-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.11799.298\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4f5895f3-2d93-4355-bcbb-97c6701d0028\" name=\"Changes\" comment=\"\" />\r\n      <created>1703141547529</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1703141547529</updated>\r\n      <workItem from=\"1703141550763\" duration=\"1349000\" />\r\n      <workItem from=\"1703142922707\" duration=\"7847000\" />\r\n      <workItem from=\"1704341315070\" duration=\"7122000\" />\r\n      <workItem from=\"1704766847308\" duration=\"10108000\" />\r\n      <workItem from=\"1705028553447\" duration=\"9551000\" />\r\n      <workItem from=\"1705287635684\" duration=\"4323000\" />\r\n      <workItem from=\"1705292066581\" duration=\"3243000\" />\r\n      <workItem from=\"1705295667683\" duration=\"2883000\" />\r\n      <workItem from=\"1705633485826\" duration=\"9982000\" />\r\n      <workItem from=\"1705889164536\" duration=\"2931000\" />\r\n      <workItem from=\"1705967371702\" duration=\"1489000\" />\r\n      <workItem from=\"1706062032285\" duration=\"1298000\" />\r\n      <workItem from=\"1706259312347\" duration=\"426000\" />\r\n      <workItem from=\"1706497270526\" duration=\"5894000\" />\r\n      <workItem from=\"1706585641698\" duration=\"1168000\" />\r\n      <workItem from=\"1706670760232\" duration=\"3283000\" />\r\n      <workItem from=\"1707102402558\" duration=\"7450000\" />\r\n      <workItem from=\"1707192362617\" duration=\"1247000\" />\r\n      <workItem from=\"1707274948079\" duration=\"3437000\" />\r\n      <workItem from=\"1707707791643\" duration=\"4132000\" />\r\n      <workItem from=\"1707879719970\" duration=\"917000\" />\r\n      <workItem from=\"1707971845089\" duration=\"1270000\" />\r\n      <workItem from=\"1708030997616\" duration=\"1466000\" />\r\n      <workItem from=\"1708398047783\" duration=\"3358000\" />\r\n      <workItem from=\"1708570867626\" duration=\"6436000\" />\r\n      <workItem from=\"1708676380820\" duration=\"2000\" />\r\n      <workItem from=\"1708739543237\" duration=\"677000\" />\r\n      <workItem from=\"1709002760714\" duration=\"13655000\" />\r\n      <workItem from=\"1709066117033\" duration=\"4659000\" />\r\n      <workItem from=\"1709175398565\" duration=\"10042000\" />\r\n      <workItem from=\"1709186105985\" duration=\"663000\" />\r\n      <workItem from=\"1709590843052\" duration=\"4245000\" />\r\n      <workItem from=\"1709614088259\" duration=\"3920000\" />\r\n      <workItem from=\"1709780598640\" duration=\"10056000\" />\r\n      <workItem from=\"1709796875248\" duration=\"18000\" />\r\n      <workItem from=\"1710215798572\" duration=\"6298000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Add stock market analysis &#10;&#10;Scrape stock data using yfinance API.&#10;Add outlier detection and metadata.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1707104517108</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1707104517108</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Add stock market analysis &#10;&#10;Scrape stock data using yfinance API.&#10;Add outlier detection and metadata.\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Add stock market analysis &#10;&#10;Scrape stock data using yfinance API.&#10;Add outlier detection and metadata.\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/Stock_Data_Analysis.py</url>\r\n          <line>3</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/ASX$Stock_Data_Visualisation.coverage\" NAME=\"Stock_Data_Visualisation Coverage Results\" MODIFIED=\"1704341453752\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/ASX$Stock_Market_Application.coverage\" NAME=\"Stock_Market_Application Coverage Results\" MODIFIED=\"1709614658811\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,13 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="4f5895f3-2d93-4355-bcbb-97c6701d0028" name="Changes" comment="Add stock market analysis &#10;&#10;Scrape stock data using yfinance API.&#10;Add outlier detection and metadata.">
-      <change afterPath="$PROJECT_DIR$/Building a Dash app.md" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Data Structures of Stock Data.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Stock Analysis.md" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/stock_market_app_review.md" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/ASX.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/ASX.iml" afterDir="false" />
+    <list default="true" id="4f5895f3-2d93-4355-bcbb-97c6701d0028" name="Changes" comment="Merge remote-tracking branch 'origin/master'">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Stock Analysis.md" beforeDir="false" afterPath="$PROJECT_DIR$/Stock Analysis.md" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Stock_Data_Analysis.py" beforeDir="false" afterPath="$PROJECT_DIR$/Stock_Data_Analysis.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -56,6 +52,7 @@
   </component>
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
+    &quot;Python.Stock_Data_Analysis.executor&quot;: &quot;Run&quot;,
     &quot;Python.Stock_Data_Visualisation.executor&quot;: &quot;Run&quot;,
     &quot;Python.Stock_Market_Application.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
@@ -74,7 +71,30 @@
     &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
 }</component>
-  <component name="RunManager">
+  <component name="RunManager" selected="Python.Stock_Data_Analysis">
+    <configuration name="Stock_Data_Analysis" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="ASX" />
+      <option name="ENV_FILES" value="" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Stock_Data_Analysis.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
     <configuration name="Stock_Market_Application" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="ASX" />
       <option name="ENV_FILES" value="" />
@@ -100,6 +120,7 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.Stock_Data_Analysis" />
         <item itemvalue="Python.Stock_Market_Application" />
       </list>
     </recent_temporary>
@@ -155,6 +176,7 @@
       <workItem from="1709780598640" duration="10056000" />
       <workItem from="1709796875248" duration="18000" />
       <workItem from="1710215798572" duration="6298000" />
+      <workItem from="1710385407077" duration="9486000" />
     </task>
     <task id="LOCAL-00001" summary="Add stock market analysis &#10;&#10;Scrape stock data using yfinance API.&#10;Add outlier detection and metadata.">
       <option name="closed" value="true" />
@@ -186,6 +208,7 @@
     </breakpoint-manager>
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/ASX$Stock_Data_Analysis.coverage" NAME="Stock_Data_Analysis Coverage Results" MODIFIED="1710385474898" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/ASX$Stock_Data_Visualisation.coverage" NAME="Stock_Data_Visualisation Coverage Results" MODIFIED="1704341453752" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/ASX$Stock_Market_Application.coverage" NAME="Stock_Market_Application Coverage Results" MODIFIED="1709614658811" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
diff --git a/.idea/ASX.iml b/.idea/stock-market-application-2024.iml
rename from .idea/ASX.iml
rename to .idea/stock-market-application-2024.iml
